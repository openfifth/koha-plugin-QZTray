[% USE raw %]
[% USE Asset %]
[% USE KohaDates %]
[% PROCESS 'i18n.inc' %]
[% SET footerjs = 1 %]
[% INCLUDE 'doc-head-open.inc' %]
<title>[% FILTER collapse %]
    [% t("QZ Tray Integration") | html %] &rsaquo;
    [% t("Plugins") | html %] &rsaquo;
    [% t("Koha") | html %]
[% END %]</title>
[% INCLUDE 'doc-head-close.inc' %]
</head>
<body id="plugins_qztray_configure" class="plugins">
[% WRAPPER 'header.inc' %]
    [% INCLUDE 'cat-search.inc' %]
[% END %]

[% WRAPPER 'sub-header.inc' %]
    [% WRAPPER breadcrumbs %]
        [% WRAPPER breadcrumb_item %]
            <a href="/cgi-bin/koha/plugins/plugins-home.pl">Plugins</a>
        [% END %]
        [% WRAPPER breadcrumb_item %]
            <a href="/cgi-bin/koha/plugins/run.pl?class=[% CLASS | uri %]&method=report">QZ Tray Integration</a>
        [% END %]
        [% WRAPPER breadcrumb_item bc_active= 1 %]
            <span>Configuration</span>
        [% END %]
    [% END #/ WRAPPER breadcrumbs %]
[% END #/ WRAPPER sub-header.inc %]

<div id="main container-fluid">
    <div class="row">
        <div class="col-md-10 order-md-2 order-sm-1">
            <main>
                <h1>QZ Tray Integration Configuration</h1>
                
                [% IF encryption_error %]
                    <div class="alert alert-danger">
                        <h4>Encryption Configuration Required</h4>
                        <p>[% error_message | html %]</p>
                        <p>This plugin requires encryption to securely store certificates and private keys. Please contact your system administrator to configure encryption in Koha.</p>
                    </div>
                [% ELSIF errors %]
                    <div class="alert alert-danger">
                        <h4>Configuration errors:</h4>
                        <ul>
                            [% FOREACH error IN errors %]
                                <li>[% error | html %]</li>
                            [% END %]
                        </ul>
                    </div>
                [% END %]
                
                <div class="alert alert-info">
                    <h4>About QZ Tray Integration</h4>
                    <p>This plugin integrates QZ Tray printing functionality into Koha. You need to upload your digital certificate and private key files to enable secure communication with QZ Tray.</p>
                    <p>These files are typically provided when you set up QZ Tray for secure printing operations.</p>
                </div>
                
                <form method="post" enctype="multipart/form-data">
                    [% INCLUDE 'csrf-token.inc' %]
                    <input type="hidden" name="class" value="[% CLASS %]"/>
                    <input type="hidden" name="method" value="[% METHOD %]"/>
                    <input type="hidden" name="save" value="1" />
                    
                    <fieldset class="rows">
                        <legend>Certificate Configuration</legend>
                        <ol>
                            <li>
                                <label for="certificate_upload">Digital Certificate File:</label>
                                <input type="file" name="certificate_upload" id="certificate_upload" accept=".txt,.pem,.crt" />
                                [% IF certificate_file %]
                                    <div class="hint">Current certificate: Securely stored and encrypted</div>
                                [% ELSE %]
                                    <div class="hint">No certificate uploaded</div>
                                [% END %]
                            </li>
                            <li>
                                <label for="private_key_upload">Private Key File:</label>
                                <input type="file" name="private_key_upload" id="private_key_upload" accept=".key,.pem" />
                                [% IF private_key_file %]
                                    <div class="hint">Current private key: Securely stored and encrypted</div>
                                [% ELSE %]
                                    <div class="hint">No private key uploaded</div>
                                [% END %]
                            </li>
                        </ol>
                    </fieldset>
                    
                    [% IF cash_registers && cash_registers.count > 0 %]
                    <fieldset class="rows">
                        <legend>Printer Settings</legend>
                        <div class="hint">Configure printers for each cash register. If no printer is specified, the system default printer will be used.</div>
                        <div style="margin-bottom: 10px;">
                            <button type="button" id="refresh_printers">Refresh Printer List</button>
                            <div id="printer_status" class="hint" style="display: inline-block; margin-left: 10px;"></div>
                        </div>
                        <ol>
                            [% FOREACH register IN cash_registers %]
                            <li>
                                <label for="register_printer_[% register.id %]">[% register.name | html %] ([% register.description | html %]):</label>
                                <input type="hidden" name="register_id" value="[% register.id %]" />
                                <select name="register_printer" id="register_printer_[% register.id %]" class="register_printer_select">
                                    <option value="">Use system default printer</option>
                                    [% IF register_mappings.${register.id} %]
                                        <option value="[% register_mappings.${register.id} | html %]" selected="selected">[% register_mappings.${register.id} | html %]</option>
                                    [% END %]
                                </select>
                            </li>
                            [% END %]
                        </ol>
                    </fieldset>
                    [% ELSE %]
                    <div class="alert alert-info">
                        <h4>No Cash Registers Found</h4>
                        <p>No cash registers are configured for this library. Please contact your system administrator to set up cash registers before configuring printers.</p>
                    </div>
                    [% END %]
                    
                    
                    <fieldset class="action">
                        <input type="submit" class="btn btn-primary" value="Save configuration" />
                        <a class="cancel" href="/cgi-bin/koha/plugins/plugins-home.pl">Cancel</a>
                    </fieldset>
                </form>
            </main>
        </div>
        <div class="col-md-2 order-sm-2 order-md-1">
            <aside></aside>
        </div>
    </div>
</div>

<script type="text/javascript">
function documentReady(fn) {
    if (document.readyState !== 'loading') {
        fn();
    } else {
        document.addEventListener('DOMContentLoaded', fn);
    }
}

documentReady(function() {
    console.log('Configuration page ready');
    console.log('qz available:', typeof qz !== 'undefined');
    console.log('KEYUTIL available:', typeof KEYUTIL !== 'undefined');

    // Set up printer refresh functionality
    setupPrinterRefresh();

    function setupPrinterRefresh() {
        var refreshButton = document.getElementById('refresh_printers');
        if (refreshButton) {
            refreshButton.addEventListener('click', refreshPrinterList);
        }

        // Show initial status
        var statusElement = document.getElementById('printer_status');
        if (statusElement) {
            statusElement.textContent = 'Click "Refresh Printer List" to detect printers';
        }
    }

    function refreshPrinterList() {
        var statusElement = document.getElementById('printer_status');
        var refreshButton = document.getElementById('refresh_printers');

        if (statusElement) {
            statusElement.textContent = 'Connecting to QZ Tray...';
            statusElement.className = statusElement.className.replace(' error', '');
        }

        if (refreshButton) {
            refreshButton.disabled = true;
        }

        if (typeof qz === 'undefined') {
            if (statusElement) {
                statusElement.textContent = 'QZ Tray libraries not loaded. Please enable the plugin in the staff interface and try again.';
                statusElement.className += ' error';
            }
            if (refreshButton) {
                refreshButton.disabled = false;
            }
            return;
        }

        // Set up minimal QZ Tray configuration for printer detection
        qz.security.setCertificatePromise(function(resolve, reject) {
            resolve(''); // Empty certificate for printer detection
        });

        qz.security.setSignaturePromise(function(toSign) {
            return function(resolve, reject) {
                resolve(''); // Empty signature for printer detection
            };
        });

        qz.websocket.connect().then(function() {
            if (statusElement) {
                statusElement.textContent = 'Connected to QZ Tray, fetching printers...';
            }
            return qz.printers.find();
        }).then(function(printers) {
            updatePrinterList(printers);
            if (statusElement) {
                statusElement.textContent = 'Found ' + printers.length + ' printer(s)';
            }
        }).catch(function(error) {
            console.error('QZ Tray error:', error);
            if (statusElement) {
                statusElement.textContent = 'Error: ' + error.message;
                statusElement.className += ' error';
            }
        }).finally(function() {
            if (refreshButton) {
                refreshButton.disabled = false;
            }
            if (typeof qz !== 'undefined' && qz.websocket) {
                qz.websocket.disconnect();
            }
        });
    }

    function updatePrinterList(printers) {
        // Update all register-specific printer selects
        var registerSelects = document.querySelectorAll('.register_printer_select');
        registerSelects.forEach(function(select) {
            updateSinglePrinterSelect(select, printers);
        });
    }

    function updateSinglePrinterSelect(select, printers) {
        var currentValue = select.value;

        // Clear existing options except the default
        var options = select.querySelectorAll('option[value!=""]');
        options.forEach(function(option) {
            option.remove();
        });

        // Add printers to the list
        printers.forEach(function(printer) {
            var option = document.createElement('option');
            option.value = printer;
            option.textContent = printer;

            if (printer === currentValue) {
                option.selected = true;
            }

            select.appendChild(option);
        });
    }
});
</script>

[% INCLUDE 'intranet-bottom.inc' %]